<% unless notice.nil? %>
  <input type="hidden" id="notice" value="<%= notice %>" data-type="<%= flash[:type] %>" data-state="<%= flash[:state] %>" data-rollback="<%= flash[:rollback_url] %>" />
<% end %>
<h3 class="header">Движение денежных средств</h3>
<div class="row">
  <div class="input-field col s12 m3">
    <select id="money_units_view">
      <option value="1">Движение денег (Cashflow)</option>
      <option value="2">Бюджетирование</option>
    </select>
    <label>Вид</label>
  </div>
  <div class="input-field col s12 m3">
    <input type="date" id="date_from" name="date_from" class="datepicker">
    <label>Период с</label>
  </div>
  <div class="input-field col s12 m3">
    <input type="date" id="date_to" name="date_to" class="datepicker">
    <label>до</label>
  </div>
  <div class="input-field col s12 m3">
    <a id="show_btn" class="waves-effect waves-light btn"><i class="material-icons left">autorenew</i>Обновить</a></a>
  </div>
</div>

<div class="row">
  <div id="chart_in_div" class="input-field col s12 m6"></div>
  <div id="chart_out_div" class="input-field col s12 m6"></div>
</div>
<div class="row">
  <div class="input-field col s12 m3">
    <h5 id="balance_label" class="green-text text-darken-2">Сальдо на конец периода: <span id="balance">0&nbsp;₽</span></h5>
    <h6 class="orange-text text-darken-2">Общий остаток: <%= @total %> ₽</span></h6>
  </div>
</div>
<div id="cashflow" class="row">
  <div class="col s12">
    <table class="striped">
      <thead>
        <tr>
          <th>Сумма</th>
          <th>Дата</th>
          <th>Группа</th>
          <th>Контрагент</th>
        </tr>
      </thead>

      <tbody id="cashflow_data">

      </tbody>
    </table>
  </div>
</div>

<div id="budgeting" class="row hidden">
  <div class="col m6 s12">
    <table class="striped">
      <thead>
        <tr>
          <th>Приход</th>
          <th>Дата</th>
          <th>Группа</th>
          <th>Контрагент</th>
        </tr>
      </thead>

      <tbody id="budgeting_data_in">

      </tbody>
    </table>
  </div>

  <div class="col m6 s12">
    <table class="striped">
      <thead>
        <tr>
          <th>Расход</th>
          <th>Дата</th>
          <th>Группа</th>
          <th>Контрагент</th>
        </tr>
      </thead>

      <tbody id="budgeting_data_out">

      </tbody>
    </table>
  </div>
</div>

<script type="text/javascript" src="/vendor/js/loader.js"></script>

<script type="text/javascript">
$( document ).ready(function(){
  var cf_data = [];
  var chart_out_data = [];
  var chart_in_data = [];
  var view = 1;

  var change_view = function(view_id){
    view = view_id
    switch ( view_id ){
      case '1':
        $('#budgeting').hide();
        $('#cashflow').show();
        break;
      case '2':
        $('#cashflow').hide();
        $('#budgeting').show();
        break;
      default:
        $('#budgeting').hide();
        $('#cashflow').show();
    }
    $('#cashflow_data').empty();
    $('#budgeting_data_in').empty();
    $('#budgeting_data_out').empty();
    render_table(view_id)
  }
  function nvl(val1, val2){
    if (val1 == null){
      return val2;
    }
    else{
      return val1;
    }
  }
  function render_table(view){
    var balance = 0;
    switch(view){
      case '1':
        var table = $('#cashflow_data');
        table.empty();
        $('#budgeting_data_in').empty();
        $('#budgeting_data_out').empty();
        $.each( cf_data, function( key, value ) {
          var amount = value[0].transaction_type == 'in' ? value[0].starting_amount : value[0].starting_amount * -1;
          var planned = value[0].transaction_type == 'in' ? value[0].planned_amount : value[0].planned_amount * -1;
          var t_date = Date.parse(value[0].transaction_date)

          balance += parseFloat(nvl(amount, planned));
          var color = '';
          if(value[0].planned_amount > 0 && (value[0].starting_amount == null || value[0].starting_amount == 0)){
            color = 'grey-text text-darken-1'
          }
          else{
            if (value[0].transaction_type == 'in'){
              color = 'green-text text-darken-2'
            }
            else{
              color = 'red-text text-darken-2'
            }
          }
          table.append($('<tr class="' + color + '">')
            .append('<td>' + nvl(value[0].starting_amount, value[0].planned_amount) + '&nbsp;₽</td>')
            .append('<td>' + formatDate(new Date(t_date)) + '</td>')
            .append('<td>' + (value[2] == null ? '<i>Не указана</i>' : value[2]) + '</td>')
            .append('<td>' + (value[1] == null ? '<i>Не указан</i>' : value[1].counterparty_name) + '</td>')
          );

        });
      break;
      case '2':
        var table_in = $('#budgeting_data_in');
        var table_out = $('#budgeting_data_out');
        table_in.empty();
        table_out.empty();
        $('#cashflow_data').empty();
        $.each( cf_data, function( key, value ) {
          var ref_table = null;
          var text_color = null

          if (value[0].transaction_type == 'in'){
            ref_table = table_in;
            text_color = 'green-text text-darken-2';
          }
          else{
            ref_table = table_out;
            text_color = 'red-text text-darken-2';
          }

          if(value[0].planned_amount > 0 && (value[0].starting_amount == null || value[0].starting_amount == 0) ){
            text_color = 'grey-text text-darken-1'
          }
          var amount = value[0].transaction_type == 'in' ? nvl(value[0].starting_amount, value[0].planned_amount) : nvl(value[0].starting_amount, value[0].planned_amount) * -1;
          var t_date = Date.parse(value[0].transaction_date)

          balance += parseFloat(nvl(value[0].starting_amount, value[0].planned_amount));

          ref_table.append($('<tr class="' + text_color + '">')
            .append('<td>' + nvl(value[0].starting_amount, value[0].planned_amount) + '&nbsp;₽</td>')
            .append('<td>' + formatDate(new Date(t_date)) + '</td>')
            .append('<td>' + (value[2] == null ? '<i>Не указана</i>' : value[2]) + '</td>')
            .append('<td>' + (value[1] == null ? '<i>Не указан</i>' : value[1].counterparty_name) + '</td>')
          );
        });
      break;
    default:

    }
    $('#balance').html(balance.toLocaleString('ru-RU') + "&nbsp;₽")
    if(balance >= 0){
      $('#balance_label').removeAttr('class')
      $('#balance_label').addClass('green-text text-darken-2')
    }
    else{
      $('#balance_label').removeAttr('class')
      $('#balance_label').addClass('red-text text-darken-2')
    }
  }

  function get_data(date_from, date_to){
    $.ajax({
      url: "/money_units/get/" + date_from + "/" + date_to,
      method: "GET",
      dataType: "json",
      success: function(response){
        cf_data = response[0];
        chart_out_data = response[1];
        chart_in_data = response[2];
        render_table(view);
        chart_in_data.length <= 0 ? $('#chart_in_div').hide() : $('#chart_in_div').show()
        chart_out_data.length <= 0 ? $('#chart_out_div').hide() : $('#chart_out_div').show()

        render_chart();
      }
    });
  };




  $('#money_units_view').on('change', function(){
    change_view( $(this).val() )
  });

  var date_from_input = $( '#date_from' ).pickadate({
    monthsFull: [ 'января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря' ],
    monthsShort: [ 'янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек' ],
    weekdaysFull: [ 'воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота' ],
    weekdaysShort: [ 'вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб' ],
    today: 'сегодня',
    clear: 'удалить',
    close: 'закрыть',
    firstDay: 1,
    hiddenSuffix: '_val',
    format: 'd mmmm yyyy г.',
    formatSubmit: 'yyyy-mm-dd',
    selectMonths: true, // Creates a dropdown to control month
    selectYears: 15, // Creates a dropdown of 15 years to control year
    onSet: function(dateSet) {
        if ( typeof(dateSet.select) == 'number' ){
          picker_date_from_input.close(true);
          if ( picker_date_to_input.get('select') != null ){
            if ( picker_date_to_input.get('select').pick < picker_date_from_input.get('select').pick ){
              picker_date_to_input.clear();
            }
          }
          picker_date_to_input.set('min', new Date(dateSet.select))
        }
    }
  }), picker_date_from_input = date_from_input.pickadate( 'picker' );

  var date_to_input = $( '#date_to' ).pickadate({
    monthsFull: [ 'января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря' ],
    monthsShort: [ 'янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек' ],
    weekdaysFull: [ 'воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота' ],
    weekdaysShort: [ 'вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб' ],
    today: 'сегодня',
    clear: 'удалить',
    close: 'закрыть',
    firstDay: 1,
    format: 'd mmmm yyyy г.',
    formatSubmit: 'yyyy-mm-dd',
    hiddenSuffix: '_val',
    selectMonths: true, // Creates a dropdown to control month
    selectYears: 15, // Creates a dropdown of 15 years to control year
    onSet: function(dateSet) {
      if ( typeof(dateSet.select) == 'number' ){
        picker_date_to_input.close(true);
      }
    }
  }), picker_date_to_input = date_to_input.pickadate( 'picker' );

  if (picker_date_from_input !== undefined && picker_date_to_input !== undefined ){
    nowdate = new Date();
    nowdate.setDate(1);
    picker_date_from_input.set('select', nowdate);
    nowdate.setMonth(nowdate.getMonth()+1);
    nowdate.setDate(nowdate.getDate()-1);
    picker_date_to_input.set('select', nowdate);
  }

  $('#show_btn').on('click', function(){
    var view_id = $('#money_units_view').val();
    change_view( view_id );
    var from = $('input[name=date_from_val]').val()
    var to = $('input[name=date_to_val]').val()
    get_data(from, to);
  });

  $('#show_btn').trigger('click');

  function render_chart(type){
    // Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart() {

      // Create the data table.
        var data_out = new google.visualization.DataTable();
        data_out.addColumn('string', 'Группа затрат');
        data_out.addColumn('number', 'Затраты');
        data_out.addRows(
          chart_out_data
        );

        // Set chart options
        var options_out = {'title':'Расходы',
                       'width':500,
                       'height':300};
        // Instantiate and draw our chart, passing in some options.
        var chart_out = new google.visualization.PieChart(document.getElementById('chart_out_div'));
        chart_out.draw(data_out, options_out);

        var data_in = new google.visualization.DataTable();
        data_in.addColumn('string', 'Группа доходов');
        data_in.addColumn('number', 'Доходы');
        data_in.addRows(
          chart_in_data
        );

        // Set chart options
        var options_in = {'title':'Доходы',
                       'width':500,
                       'height':300};
        // Instantiate and draw our chart, passing in some options.
        var chart_in = new google.visualization.PieChart(document.getElementById('chart_in_div'));
        google.visualization.events.addListener(drawChart, 'error', readyHandler);
        chart_in.draw(data_in, options_in);
    }

    function readyHandler() {
      alert('The user selected');
    }
  }

});
</script>
